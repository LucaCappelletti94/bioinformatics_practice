{
    "creation_time": 1619185502.9331777,
    "creation_time_human": "2021-04-23 13:45:02",
    "time_delta": 10.482036352157593,
    "time_delta_human": "10 seconds",
    "file_dump_time": 0.005745649337768555,
    "file_dump_time_human": "0 seconds",
    "file_dump_size": 496,
    "file_dump_size_human": "496 Bytes",
    "load_kwargs": {},
    "dump_kwargs": {},
    "function_name": "train_model",
    "function_file": "<ipython-input-9-cef17269bcf3>:3",
    "args_to_ignore": [
        "model",
        "training_sequence",
        "test_sequence"
    ],
    "source": "@Cache(\n    cache_path=[\n        \"{task}/{model_name}/history_{_hash}.csv.xz\",\n        \"{task}/{model_name}/performance_{_hash}.csv.xz\",\n    ],\n    args_to_ignore=[\n        \"model\", \"training_sequence\", \"test_sequence\"\n    ]\n)\ndef train_model(\n    model:Model,\n    model_name: str,\n    task: str,\n    training_sequence:MixedSequence,\n    test_sequence:MixedSequence,\n    holdout_number: int\n):\n    history = pd.DataFrame(model.fit(\n        train_sequence,\n        validation_data=test_sequence,\n        epochs=1000,\n        verbose=False,\n        callbacks=[\n            EarlyStopping(\"loss\"),\n            # I have commented this because we do not need this loading bar\n            # when running the main experiment loop. When you experiment with\n            # the model structure you may want to enable this to get a feel\n            # of how the model is performing during the training.\n            TqdmCallback(verbose=1)\n        ]\n    ).history)\n    \n    train_evaluation = dict(zip(model.metrics_names, model.evaluate(train_sequence, verbose=False)))\n    test_evaluation = dict(zip(model.metrics_names, model.evaluate(test_sequence, verbose=False)))\n    train_evaluation[\"run_type\"] = \"train\"\n    test_evaluation[\"run_type\"] = \"test\"\n    for evaluation in (train_evaluation, test_evaluation):\n        evaluation[\"model_name\"] = model_name\n        evaluation[\"holdout_number\"] = holdout_number\n    \n    evaluations = pd.DataFrame([\n        train_evaluation,\n        test_evaluation\n    ])\n    \n    return history, evaluations\n",
    "backend_metadata": {
        "type": "pandas",
        "columns_types": {
            "loss": "float64",
            "accuracy": "float64",
            "recall": "float64",
            "precision": "float64",
            "AUROC": "float64",
            "AUPRC": "float64",
            "f1_score": "float64",
            "balanced_accuracy": "float64",
            "specificity": "float64",
            "miss_rate": "float64",
            "fall_out": "float64",
            "mcc": "float64",
            "tp/t": "float64",
            "fp/t": "float64",
            "tn/t": "float64",
            "fn/t": "float64",
            "negative_predictive_value": "float64",
            "false_discovery_rate": "float64",
            "false_omission_rate": "float64",
            "prevalence_threshold": "float64",
            "threat_score": "float64",
            "fowlkes_mallows_index": "float64",
            "informedness": "float64",
            "markedness": "float64",
            "LR_pos": "float64",
            "LR_neg": "float64",
            "DOR": "float64",
            "run_type": "str",
            "model_name": "str",
            "holdout_number": "int64"
        },
        "index_type": "int64",
        "columns_names_type": "str"
    },
    "parameters": {
        "model_name": "FFNN",
        "task": "active_enhancers_vs_active_promoters",
        "holdout_number": 1
    }
}