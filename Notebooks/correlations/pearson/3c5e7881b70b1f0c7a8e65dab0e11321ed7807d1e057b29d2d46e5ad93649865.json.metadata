{
    "creation_time": 1622647434.3650284,
    "creation_time_human": "2021-06-02 15:23:54",
    "time_delta": 0.002258777618408203,
    "time_delta_human": "0 seconds",
    "file_dump_time": 0.0001842975616455078,
    "file_dump_time_human": "0 seconds",
    "file_dump_size": 52,
    "file_dump_size_human": "52 Bytes",
    "load_kwargs": {},
    "dump_kwargs": {},
    "function_name": "compute_pearson",
    "function_file": "<ipython-input-75-6546ecd8e6f7>:3",
    "args_to_ignore": [
        "X"
    ],
    "source": "@Cache(\n    cache_path=\"correlations/pearson/{_hash}.json\",\n    args_to_ignore=[\"X\"]\n)\ndef compute_pearson(\n    X:pd.DataFrame,\n    feature_left: str,\n    feature_right: str,\n    cell_line: str,\n    region: str\n) -> Dict:\n    \"\"\"Returns Pearson correlation.\n    \n    Implementative details\n    ------------------------------\n    We may need to recompute this value across\n    multiple re-runs of the jupyter notebook,\n    so since it takes a bit of time to do so we cache it.\n    \n    Parameters\n    ----------------------\n    X:pd.DataFrame,\n        The epigenomic data.\n    feature_left: str,\n        The left features to compute pearson for.\n    feature_right: str,\n        The right features to compute pearson for.\n    cell_line: str,\n        The cell line.\n    region: str,\n        The cis-regulatory region of interest.\n    \"\"\"\n    correlation, p_value = pearsonr(\n        X[feature_left].values.flatten(),\n        X[feature_right].values.flatten(),\n    )\n    return dict(\n        correlation=correlation,\n        p_value=p_value\n    )\n",
    "backend_metadata": {},
    "parameters": {
        "feature_left": "NR2F1",
        "feature_right": "TSHZ1",
        "cell_line": "K562",
        "region": "promoters"
    }
}