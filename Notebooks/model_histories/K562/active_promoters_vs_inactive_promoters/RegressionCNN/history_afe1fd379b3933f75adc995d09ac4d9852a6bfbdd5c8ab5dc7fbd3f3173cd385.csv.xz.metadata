{
    "creation_time": 1623324175.587574,
    "creation_time_human": "2021-06-10 11:22:55",
    "time_delta": 12.877310276031494,
    "time_delta_human": "12 seconds",
    "file_dump_time": 0.004537105560302734,
    "file_dump_time_human": "0 seconds",
    "file_dump_size": 408,
    "file_dump_size_human": "408 Bytes",
    "load_kwargs": {},
    "dump_kwargs": {},
    "function_name": "train_model",
    "function_file": "<ipython-input-15-2cef334d9d41>:3",
    "args_to_ignore": [
        "model",
        "training_sequence",
        "test_sequence"
    ],
    "source": "@Cache(\n    cache_path=[\n        \"model_histories/{cell_line}/{task}/{model_name}/history_{_hash}.csv.xz\",\n        \"model_performance/{cell_line}/{task}/{model_name}/performance_{_hash}.csv.xz\",\n    ],\n    args_to_ignore=[\n        \"model\", \"training_sequence\", \"test_sequence\"\n    ]\n)\ndef train_model(\n    model: Model,\n    model_name: str,\n    task: str,\n    cell_line: str,\n    training_sequence: MixedSequence,\n    test_sequence: MixedSequence,\n    holdout_number: int\n) -> Tuple[pd.DataFrame, pd.DataFrame]:\n    \"\"\"Returns training history and model evaluations.\n    \n    Parameters\n    ---------------------\n    model: Model,\n        The model to train.\n    model_name: str,\n        The model name.\n    task: str,\n        The name of the task.\n    cell_line: str,\n        Name of the considered cell line.\n    training_sequence: MixedSequence,\n        The training sequence.\n    test_sequence: MixedSequence,\n        The test sequence.\n    holdout_number: int,\n        The number of the current holdout.\n        \n    Returns\n    ----------------------\n    Tuple with training history dataframe and model evaluations dataframe.\n    \"\"\"\n    history = pd.DataFrame(model.fit(\n        train_sequence,\n        validation_data=test_sequence,\n        epochs=1000,\n        verbose=False,\n        callbacks=[\n            EarlyStopping(\n                \"loss\",\n                min_delta=0.001,\n                patience=2,\n                mode=\"min\"\n            ),\n            # I have commented this because we do not need this loading bar\n            # when running the main experiment loop. When you experiment with\n            # the model structure you may want to enable this to get a feel\n            # of how the model is performing during the training.\n            # TqdmCallback(verbose=1)\n        ]\n    ).history)\n    \n    train_evaluation = dict(zip(model.metrics_names, model.evaluate(train_sequence, verbose=False)))\n    test_evaluation = dict(zip(model.metrics_names, model.evaluate(test_sequence, verbose=False)))\n    train_evaluation[\"run_type\"] = \"train\"\n    test_evaluation[\"run_type\"] = \"test\"\n    \n    for evaluation in (train_evaluation, test_evaluation):\n        evaluation[\"model_name\"] = model_name\n        evaluation[\"task\"] = task\n        evaluation[\"holdout_number\"] = holdout_number\n    \n    evaluations = pd.DataFrame([\n        train_evaluation,\n        test_evaluation\n    ])\n    \n    return history, evaluations\n",
    "backend_metadata": {
        "type": "pandas",
        "columns_types": {
            "loss": "float64",
            "mse": "float64",
            "val_loss": "float64",
            "val_mse": "float64"
        },
        "index_type": "int64",
        "columns_names_type": "str"
    },
    "parameters": {
        "model_name": "RegressionCNN",
        "task": "active_promoters_vs_inactive_promoters",
        "cell_line": "K562",
        "holdout_number": 1
    }
}